// üîç Debug del hook useCarouselImagesR2 usado en la aplicaci√≥n
import { useState, useEffect, useCallback } from 'react';
import { createClient } from '@supabase/supabase-js';

// Simular el entorno de la aplicaci√≥n
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

console.log('üß™ Debugging hook useCarouselImagesR2...\n');

// Verificar variables de entorno
console.log('üìã Variables de entorno:');
console.log('  SUPABASE_URL:', supabaseUrl ? '‚úÖ OK' : '‚ùå FALTA');
console.log('  SUPABASE_KEY:', supabaseKey ? '‚úÖ OK' : '‚ùå FALTA');
console.log('  R2_CAROUSEL_URL:', process.env.R2_CAROUSEL_PUBLIC_URL ? '‚úÖ OK' : '‚ùå FALTA');
console.log('  R2_PRODUCT_URL:', process.env.R2_PRODUCT_PUBLIC_URL ? '‚úÖ OK' : '‚ùå FALTA');

if (!supabaseUrl || !supabaseKey) {
  console.log('\n‚ùå PROBLEMA: Variables de Supabase no configuradas en el navegador');
  console.log('   Las variables NEXT_PUBLIC_* deben estar en .env.local');
  console.log('   Y el servidor debe reiniciarse despu√©s de cambios en .env.local');
  process.exit(1);
}

// Crear cliente Supabase (igual que en el hook)
const supabase = createClient(supabaseUrl, supabaseKey);

// Funci√≥n de prueba del hook
async function testHookFunctions() {
  console.log('\nüß™ Probando funciones del hook...\n');
  
  // 1. Probar fetchCarouselImages
  console.log('üìã 1. Probando fetchCarouselImages...');
  try {
    const { data, error } = await supabase
      .from('carousel_images')
      .select('*')
      .order('sort_order', { ascending: true });
    
    if (error) {
      console.log('   ‚ùå Error:', error.message);
      if (error.message.includes('does not exist')) {
        console.log('   üîß La tabla "carousel_images" no existe en Supabase');
        console.log('   üìù Necesitas crear esta tabla adem√°s de "uploaded_images"');
      }
    } else {
      console.log('   ‚úÖ Consulta exitosa');
      console.log(`   üìä Im√°genes encontradas: ${data?.length || 0}`);
    }
  } catch (error) {
    console.log('   ‚ùå Error inesperado:', error.message);
  }
  
  // 2. Probar uploadCarouselImageFile (simulado)
  console.log('\nüìã 2. Probando uploadCarouselImageFile...');
  
  // Importar las funciones de R2 (simuladas para Node.js)
  try {
    const { uploadImageWithMetadata } = require('../src/lib/image-metadata');
    const { uploadCarouselImage } = require('../src/lib/r2-storage');
    
    // Crear archivo simulado
    const testFile = {
      name: 'test-from-hook.jpg',
      size: 1024,
      type: 'image/jpeg'
    };
    
    console.log('   üìÅ Archivo de prueba:', testFile.name);
    
    // Esta funci√≥n deber√≠a existir en el hook
    console.log('   üîÑ Simulando uploadImageWithMetadata...');
    console.log('   ‚úÖ Funciones de R2 disponibles');
    
  } catch (error) {
    console.log('   ‚ùå Error importando funciones R2:', error.message);
    console.log('   üîß Verifica que las funciones est√©n exportadas correctamente');
  }
  
  console.log('\nüìã 3. Verificando tabla uploaded_images...');
  try {
    const { data, error } = await supabase
      .from('uploaded_images')
      .select('id, url, original_name, category')
      .limit(3);
    
    if (error) {
      console.log('   ‚ùå Error:', error.message);
    } else {
      console.log('   ‚úÖ Tabla accesible');
      console.log(`   üìä Registros: ${data?.length || 0}`);
      if (data && data.length > 0) {
        data.forEach((img, i) => {
          console.log(`     ${i+1}. ${img.original_name} (${img.category})`);
        });
      }
    }
  } catch (error) {
    console.log('   ‚ùå Error inesperado:', error.message);
  }
  
  console.log('\nüéØ RESUMEN:');
  console.log('Si hay errores arriba, esos son los problemas que est√° enfrentando tu app.');
  console.log('Si todo est√° ‚úÖ, entonces el problema est√° en el frontend/UI.');
}

testHookFunctions().catch(console.error);
